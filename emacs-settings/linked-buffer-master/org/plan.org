
* Bug

** block-comment uses ";; " with a space

Currently the two lisp block comment modes (clojure-latex, clojure-asciidoc)
use ";; " as their comment which is fine because it is what we want to
insert, but breaks when ";;" with no space is inserted. Bit of a pain because
if I want to have paragraph spaces it is not going to work.

Problem is, I am using this both to insert the new space and to define the
regexp lookup.

So, we use this in a couple of places. Here.

  (format "^\\(%s\\)*%s"
          (oref conf :comment)
          (regexp-quote
           (oref conf :comment-start))))

and here both a regexp

(defmethod linked-buffer-blk-line-start-comment
  ((conf linked-buffer-block-configuration))
  (concat "^" 
          (oref conf :comment)))


and here as a string.

(defun linked-buffer-blk-comment-region (conf begin end buffer)
  "Given CONF, a `linked-buffer-configuration' object, add
start of line comment characters beween BEGIN and END in BUFFER."
  (m-buffer-replace-match
   (m-buffer-match-data
    buffer
    ;; perhaps we should ignore lines which are already commented,
    "\\(^\\).+"
    :begin begin :end end)
   (oref conf :comment) 1))

Think the point is when it's a string we should add a space in our code,
maybe through a generic method. And when it's a regexp, we should add a
"whitespace maybe". Probably make more sense that way.


* Enhancement

** More Modes to support

*** Emacs Lisp and Markdown

Markdow is probably enough for most of our purposes.


*** Clojure and Asciidoc

I think that this would be a nice combination of something immediately
web-capable for the tawny documentation/tutorial. The idea would be to have
each file as single namespace which would define up top. This would enable me
to drop the ontology and start again periodically as I choose.

So, the source delimiters are. So, the problem is that the first and last
lines are the same delimiter. So, any regexp to match the last also hits the
start. AFAICT there is not "don't match [source,lisp]" capability in emacs
regexp. Bit of a pain.

So, I need to make the match delimiters (or part of it) generic, so I can
override it. To match the start and end, then, I find all [source,lisp] and
all ----. Then for each [source,lisp] I take the next two ---- then use start
[source,lisp] to ---- as start and ---- as end.

[source,lisp]
----
----


** Optimisation

Currently, we make no use of the before change data, and clone the entire
buffer, which is clearly a long term disaster.

